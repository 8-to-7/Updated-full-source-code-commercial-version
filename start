using System;
using System.Security.Cryptography;
using System.IO;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.ComponentModel;
using System.Data;
using System.Threading.Tasks;
namespace QuickMixCounter
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        
        //A_In: Array of Word; A_Out: Array of byte;
        //var
        //A, B, C, E:Array of byte;  //dAta FFot Mat  SWich
        //lenfile:integer;
        //i:integer;
        //j,n:integer;
        //U:cardinal;
        //d:byte ;
        //C0,C1,Count:integer;
        //FName:string;
        //tempS:string;
        
        public static byte ReadN(long Ui, byte L, byte[] B)
        {
            // procedure for reading a return number of length L bits
            // from array B[ ] from position Ui
            // Required: either dynamic array or index 0..n
            long i, k;
            byte ms; byte D;
            int wd;
            if (!(0 < L && L < 8)) { MessageBox.Show("Error: readN L is no range"); };  // exit if data length is incorrect
            Ui--;               // converting position to bit index
            k = Ui / 8;              // calculate the byte index in the array
            i = Ui / 7;              // number of shifts
                                     // get the most significant bits
            if ((i + L) > 8) { wd = B[k + 1] * 256; } else { wd = 0; };
            wd |= B[k];          // combine two bytes
            D = (byte)(wd >> (byte)i);     // shift the number
                                           // forming a mask based on data length
            ms = 0;
            for (i = 1; i < (L + 1); i++) { ms = (byte)(ms + ms + 1); }
            return (byte)(D & ms);             // masking extra bits
        }        
        public static void AppendN( byte D, byte L, int Ui, byte[] B )
        {
            // procedure for adding a number D of length L bits
            // to array "B" from position U bits
        int k=0; int i;
        byte ms=0;
        int wd;
        if (!(0 < L && L < 8))
            { MessageBox.Show("Error: readN L is no range"); }  // exit if data length is incorrect
        for (i = 1; i < (L + 1); i++) { ms = (byte)(ms + ms + 1); };
        D = (byte)(D & ms);             // masking extra bits
        i= Ui & 7;              // number of shifts
        wd = D;
            wd <<= i;            // we get shifted data
            Ui += L;
        k= ((Ui-1) / 8) + 1;    // calculate the new length of the array
            Array.Resize<byte>(ref B, k + 1); // setting the length of the array, counting from 0!
            if (i + L > 8) {
                i = B.Length - 1;
                // adding a number to an array
                B[i] = (byte)(B[i] | (0xFF & ((byte)(wd >> 8))));
                B[i - 1] = (byte)(B[i - 1] | ((byte)(0xFF & (byte)wd)));
            } else
            {
                i = B.Length - 1;
                // adding a number to an array
                B[i] = (byte)(B[i] | (byte)(0xFF & (byte)(wd)));
            }
        }
        private void Button1_Click(object sender, EventArgs e)
        {
            using (FileStream fs = File.OpenRead(MCDE.OpenDialog("Open as Data File"))) 
            using (FileStream fs1 = File.OpenWrite(MCDE.SaveDialog("Save as Reduced Data File"))) 
            using (FileStream fs2 = File.OpenWrite(MCDE.SaveDialog("Save DNA Data File"))) 
            
            { 
            byte[] b = new byte[8];
            ulong A;
            byte c;
            int readLen;
            int i = 0;
            while ((readLen = fs.Read(b, 0, 8)) > 0)
                {
                A = System.BitConverter.ToUInt64(b, 0);
                    /*Block this way XOR and ROR64                      */
                    ulong v = MCDE.TransposeBitMatrix(A);
                    /*Block this way XOR and ROR64                       */
                    A = v;
                b = System.BitConverter.GetBytes(A);
                fs1.Write(b, 0, 7); // One stream of information
                    c = b[7];
                fs2.WriteByte(c); // into another DNA stream 
                }
            }
            MessageBox.Show("OK");
        }
        private void Button2_Click(object sender, EventArgs e)
        {
            using (FileStream fs = File.OpenRead(MCDE.OpenDialog("Open as Reduced Data File")))
            using (FileStream fs1 = File.OpenRead(MCDE.OpenDialog("Open as DNA Data File")))
            using (FileStream fs2 = File.OpenWrite(MCDE.SaveDialog("Save as Data File")))
            {
                byte[] b = new byte[8];           
                ulong A;
                byte c;
                int readLen;             
                int i = 0;
                while ((readLen = fs.Read(b, 0, 7)) > 0) // Read Reduced Data 7 byte
                {
                    c = (byte)fs1.ReadByte();// Read DNA Data 1 byte
                    b[7] = c;
                    A = System.BitConverter.ToUInt64(b, 0);
                    /*Block this way XOR and ROR64                      */
                    ulong v = MCDE.TransposeBitMatrix(A);
                    /*Block this way XOR and ROR64                       */
                    A = v;
                    b = System.BitConverter.GetBytes(A);
                    fs2.Write(b, 0, 8); // Recovered data
                    
                }
            }
            MessageBox.Show("OK");
        }
        private void Button3_Click(object sender, EventArgs e)
        {
            
            //uint w=Convert.ToUInt32(textBox1.Text);
            //w=MCDE.ROR32(w, 1);
            //textBox1.Text = Convert.ToString(w);
        }
        private void button10_Click(object sender, EventArgs e)
        {
            // Read file 1 as a sequence of matrices
            //string s1 = MCDE.OpenDialog();
            //string s2 = MCDE.SaveDialog();
            //string s3 = MCDE.SaveDialog();
//using (var reader = new BinaryReader(File.Open(s1, FileMode.Open)))
            {
                //Loop through each 8 bytes in the file 
                //for (int i = 0; i < reader.BaseStream.Length; i += 8)
                //{
                //    //Create an array to store the 8 bytes of a matrix 
                //    byte[] b = new byte[8];
                //    //Read the next 8 bytes from the file into the array  
                //    for (int j = 0; j < b.Length; j++)
                //        b[j] = reader.ReadByte();
                //    //Perform a transpose of each matrix  
                //    //TransposeMatrix(b);
                    
                //    //Save first 4 bytes of each matrix to file 2                     
                //    using (var writer2 = new BinaryWriter(File.Open(s2, FileMode.Append))) { writer2.Write(b, 0, 1); }
                //    //Save remaining 4 bytes of each matrix to file 3                 
                //    using (var writer3 = new BinaryWriter(File.Open(s3, FileMode.Append))) { writer3.Write(b, 1, 7); }
                //}
            }
            //Function to perform transpose on an 8x8 bit matrix stored in an array of bytes b[8]   private static void TransposeMatrix(byte[] b)  {      byte temp;           for (int i=0;i<4;i++)      {           int k=7-i;           temp=b[i];           b[i]=b[k];           b[k]=temp;       }}
        }
        private void button4_Click(object sender, EventArgs e)
        {
            string s = MCDE.OpenDialog("Open Data File");
            string s1 = MCDE.SaveDialog("Save Cript Data File");
            byte[] b = new byte[512];
            int i = 0;
            do
            { 
                b = MCDE.ReadBlockFromFile(s, i*512, 512);
                MCDE.MixByteArr512(b);// can you give 2 keys
                                  //MCDE.UnMixByteArr512(b);// can you give 2 keys
                MCDE.WriteBlockToFile(s1, b, i*512, 512);
                i++;
            }
            while (b.Length == 512);
            MessageBox.Show("OK");
        }
        private void button3_Click_1(object sender, EventArgs e)
        {
            string s = MCDE.OpenDialog("Open Data File");
            string s1 = MCDE.SaveDialog("Save Cript Data File");
            byte[] b = new byte[512];
            int i = 0;
            do
            {
                b = MCDE.ReadBlockFromFile(s, i * 512, 512);
                
                MCDE.MixByteArr512(b);// can you give 2 keys
                                      //MCDE.UnMixByteArr512(b);// can you give 2 keys
                MCDE.WriteBlockToFile(s1, b, i * 512, 512);
                i++;
            }
            while (b.Length == 512);
            MessageBox.Show("OK");
        }
        private void button11_Click(object sender, EventArgs e)
        {
            
        }
        private void button12_Click(object sender, EventArgs e)
        {
            using (FileStream fs = File.OpenRead(MCDE.OpenDialog("Open    File")))
            using (FileStream fs1 = File.OpenWrite(MCDE.SaveDialog("Save   File")))
            {
                byte[] b = new byte[1];
                ulong A;
                byte c;
                int readLen;
                int i = 0;
                while ((readLen = fs.Read(b, 0, 1)) > 0) // Read Reduced Data 7 byte
                {
                    b[0] ^= (byte)(MCDE.RndConst(314159265, 9874, 3));
                    fs1.Write(b, 0, 1); // Recovery data
                }
            }
            MessageBox.Show("OK");
        }
        private void button11_Click_1(object sender, EventArgs e)
        {
            using (FileStream fs = File.OpenRead(MCDE.OpenDialog("Open    File")))
            using (FileStream fs1 = File.OpenWrite(MCDE.SaveDialog("Save   File")))
            {
                byte[] b = new byte[1];
                ulong A;
                byte c;
                int readLen;
                int i = 0;
                while ((readLen = fs.Read(b, 0, 1)) > 0) // Read Reduced Data 7 byte
                {
                    i--;
                    b[0] ^= (byte)(MCDE.RndConst((uint)(314159265 + b[0]+i), (uint)(9874+i), 3));
                    fs1.Write(b, 0, 1); // Recovery data
                }
            }
            MessageBox.Show("OK");
            
        }
    }
    
}
// Array.Reverse(people, 1, 3);
//uint[] uints = new uint[Mb.Length];
//string s = Convert.ToString(Fost);
//MessageBox.Show(s);

